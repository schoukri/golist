// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at 2020-04-08 00:01:13.468514 +0000 UTC.

package golist

import (
	"fmt"
	"math/rand"
	
	"time"
)

// SliceError is a slice of type error.
type SliceError struct {
	data []error
}

// NewSliceError returns a pointer to a new SliceError initialized with the specified elements.
func NewSliceError(elems ...error) *SliceError {
	s := new(SliceError)
	s.data = make([]error, len(elems))
	for i := 0; i < len(elems); i++ {
		s.data[i] = elems[i]
	}
	return s
}

// Append adds the elements to the end of SliceError.
func (s *SliceError) Append(elems ...error) *SliceError {
	if s == nil {
		return nil
	}
	s.data = append(s.data, elems...)
	return s
}

// Prepend adds the elements to the beginning of SliceError.
func (s *SliceError) Prepend(elems ...error) *SliceError {
	if s == nil {
		return nil
	}
	s.data = append(elems, s.data...)
	return s
}

// At returns the element in SliceError at the specified index.
func (s *SliceError) At(index int) error {
	if s.data == nil || len(s.data) == 0 {
		panic("SliceError does not contain any elements")
	}

	if index >= len(s.data) || index < 0 {
		panic(fmt.Sprintf("index %d outside the range of SliceError", index))
	}

	return s.data[index]
}

// Set sets the element of SliceError at the specified index.
func (s *SliceError) Set(index int, elem error) *SliceError {
	if s == nil {
		return nil
	}
	s.data[index] = elem
	return s
}

// Insert inserts the elements into SliceError at the specified index.
func (s *SliceError) Insert(index int, elems ...error) *SliceError {
	if s == nil {
		return nil
	}

	// Grow the slice by the number of elements (using the zero value)
	var zero error
	for i := 0; i < len(elems); i++ {
		s.data = append(s.data, zero)
	}

	// Use copy to move the upper part of the slice out of the way and open a hole.
	copy(s.data[index+len(elems):], s.data[index:])

	// Store the new values
	for i := 0; i < len(elems); i++ {
		s.data[index+i] = elems[i]
	}

	// Return the result.
	return s
}

// Remove removes the element from SliceError at the specified index.
func (s *SliceError) Remove(index int) *SliceError {
	if s == nil {
		return nil
	}
	s.data = append(s.data[:index], s.data[index+1:]...)
	return s
}

// Filter removes elements from SliceError that do not satisfy the filter function.
func (s *SliceError) Filter(fn func(elem error) bool) *SliceError {
	if s == nil {
		return nil
	}
	data := s.data[:0]
	for _, elem := range s.data {
		if fn(elem) {
			data = append(data, elem)
		}
	}
	s.data = data
	return s
}

// Transform modifies each element of SliceError according to the specified function.
func (s *SliceError) Transform(fn func(elem error) error) *SliceError {
	if s == nil {
		return nil
	}
	for i, elem := range s.data {
		s.data[i] = fn(elem)
	}
	return s
}

// Unique modifies SliceError to keep only the first occurrence of each element (removing any duplicates).
func (s *SliceError) Unique() *SliceError {
	if s == nil {
		return nil
	}
	seen := make(map[error]struct{})
	data := s.data[:0]
	for _, elem := range s.data {
		if _, ok := seen[elem]; !ok {
			data = append(data, elem)
			seen[elem] = struct{}{}
		}
	}
	s.data = data
	return s
}

// Reverse reverses the order of the elements of SliceError.
func (s *SliceError) Reverse() *SliceError {
	if s == nil {
		return nil
	}

	for i := len(s.data)/2 - 1; i >= 0; i-- {
		opp := len(s.data) - 1 - i
		s.Swap(i, opp)
	}

	return s
}

// Shuffle randomly shuffles the order of the elements in SliceError.
func (s *SliceError) Shuffle(seed int64) *SliceError {
	if s == nil {
		return nil
	}

	if seed == 0 {
		seed = time.Now().UnixNano()
	}

	r := rand.New(rand.NewSource(seed))
	r.Shuffle(s.Count(), s.Swap)

	return s
}

// Data returns the raw elements of SliceError.
func (s *SliceError) Data() []error {
	if s == nil {
		return nil
	}
	return s.data
}

// Count returns the number of elements in SliceError.
func (s *SliceError) Count() int {
	return len(s.data)
}

// Len returns the number of elements in SliceError (alias for Count).
func (s *SliceError) Len() int {
	return s.Count()
}

// Swap swaps the elements in SliceError specified by the indices i and j.
func (s *SliceError) Swap(i, j int) {
	s.data[i], s.data[j] = s.data[j], s.data[i]
}



// Clone performs a deep copy of SliceError and returns it
func (s *SliceError) Clone() *SliceError {
	if s == nil {
		return nil
	}
	s2 := new(SliceError)
	s2.data = make([]error, len(s.data))
	copy(s2.data, s.data)
	return s2
}

// Equal returns true if the SliceError is logically equivalent to the specified SliceError.
func (s *SliceError) Equal(s2 *SliceError) bool {
	if s == s2 {
		return true
	}

	if s == nil || s2 == nil {
		return false // has to be false because s == s2 tested earlier
	}

	if len(s.data) != len(s2.data) {
		return false
	}

	for i, elem := range s.data {
		if elem != s2.data[i] {
			return false
		}
	}

	return true
}
