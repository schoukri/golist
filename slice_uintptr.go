// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at 2020-04-08 01:37:46.185679 +0000 UTC.

package golist

import (
	"fmt"
	"math/rand"
	"sort"
	"time"
)

// SliceUintptr is a slice of type uintptr.
type SliceUintptr struct {
	data []uintptr
}

// NewSliceUintptr returns a pointer to a new SliceUintptr initialized with the specified elements.
func NewSliceUintptr(elems ...uintptr) *SliceUintptr {
	s := new(SliceUintptr)
	s.data = make([]uintptr, len(elems))
	for i := 0; i < len(elems); i++ {
		s.data[i] = elems[i]
	}
	return s
}

// Append adds the elements to the end of SliceUintptr.
func (s *SliceUintptr) Append(elems ...uintptr) *SliceUintptr {
	if s == nil {
		return nil
	}
	s.data = append(s.data, elems...)
	return s
}

// Prepend adds the elements to the beginning of SliceUintptr.
func (s *SliceUintptr) Prepend(elems ...uintptr) *SliceUintptr {
	if s == nil {
		return nil
	}
	s.data = append(elems, s.data...)
	return s
}

// At returns the element in SliceUintptr at the specified index.
func (s *SliceUintptr) At(index int) uintptr {
	if s.data == nil || len(s.data) == 0 {
		panic("SliceUintptr does not contain any elements")
	}

	if index >= len(s.data) || index < 0 {
		panic(fmt.Sprintf("index %d outside the range of SliceUintptr", index))
	}

	return s.data[index]
}

// Set sets the element of SliceUintptr at the specified index.
func (s *SliceUintptr) Set(index int, elem uintptr) *SliceUintptr {
	if s == nil {
		return nil
	}
	s.data[index] = elem
	return s
}

// Insert inserts the elements into SliceUintptr at the specified index.
func (s *SliceUintptr) Insert(index int, elems ...uintptr) *SliceUintptr {
	if s == nil {
		return nil
	}

	// Grow the slice by the number of elements (using the zero value)
	var zero uintptr
	for i := 0; i < len(elems); i++ {
		s.data = append(s.data, zero)
	}

	// Use copy to move the upper part of the slice out of the way and open a hole.
	copy(s.data[index+len(elems):], s.data[index:])

	// Store the new values
	for i := 0; i < len(elems); i++ {
		s.data[index+i] = elems[i]
	}

	// Return the result.
	return s
}

// Remove removes the element from SliceUintptr at the specified index.
func (s *SliceUintptr) Remove(index int) *SliceUintptr {
	if s == nil {
		return nil
	}
	s.data = append(s.data[:index], s.data[index+1:]...)
	return s
}

// Filter removes elements from SliceUintptr that do not satisfy the filter function.
func (s *SliceUintptr) Filter(fn func(elem uintptr) bool) *SliceUintptr {
	if s == nil {
		return nil
	}
	data := s.data[:0]
	for _, elem := range s.data {
		if fn(elem) {
			data = append(data, elem)
		}
	}
	s.data = data
	return s
}

// Transform modifies each element of SliceUintptr according to the specified function.
func (s *SliceUintptr) Transform(fn func(elem uintptr) uintptr) *SliceUintptr {
	if s == nil {
		return nil
	}
	for i, elem := range s.data {
		s.data[i] = fn(elem)
	}
	return s
}

// Unique modifies SliceUintptr to keep only the first occurrence of each element (removing any duplicates).
func (s *SliceUintptr) Unique() *SliceUintptr {
	if s == nil {
		return nil
	}
	seen := make(map[uintptr]struct{})
	data := s.data[:0]
	for _, elem := range s.data {
		if _, ok := seen[elem]; !ok {
			data = append(data, elem)
			seen[elem] = struct{}{}
		}
	}
	s.data = data
	return s
}

// Reverse reverses the order of the elements of SliceUintptr.
func (s *SliceUintptr) Reverse() *SliceUintptr {
	if s == nil {
		return nil
	}

	for i := len(s.data)/2 - 1; i >= 0; i-- {
		opp := len(s.data) - 1 - i
		s.Swap(i, opp)
	}

	return s
}

// Shuffle randomly shuffles the order of the elements in SliceUintptr.
func (s *SliceUintptr) Shuffle(seed int64) *SliceUintptr {
	if s == nil {
		return nil
	}

	if seed == 0 {
		seed = time.Now().UnixNano()
	}

	r := rand.New(rand.NewSource(seed))
	r.Shuffle(s.Count(), s.Swap)

	return s
}

// Data returns the raw elements of SliceUintptr.
func (s *SliceUintptr) Data() []uintptr {
	if s == nil {
		return nil
	}
	return s.data
}

// Count returns the number of elements in SliceUintptr.
func (s *SliceUintptr) Count() int {
	return len(s.data)
}

// Len returns the number of elements in SliceUintptr (alias for Count).
func (s *SliceUintptr) Len() int {
	return s.Count()
}

// Swap swaps the elements in SliceUintptr specified by the indices i and j.
func (s *SliceUintptr) Swap(i, j int) {
	s.data[i], s.data[j] = s.data[j], s.data[i]
}

// Less returns true if the SliceUintptr element at index i is less than the element at index j.
func (s *SliceUintptr) Less(i, j int) bool {
	return s.data[i] < s.data[j]
}

// Sort sorts the elements of SliceUintptr in increasing order.
func (s *SliceUintptr) Sort() *SliceUintptr {
	if s == nil {
		return nil
	}
	sort.Sort(s)
	return s
}

// Min returns the smallest (least ordered) element in SliceUintptr.
func (s *SliceUintptr) Min() uintptr {
	if s.data == nil || len(s.data) == 0 {
		panic("SliceUintptr does not contain any elements")
	}
	// start with the first value
	min := s.data[0]
	for _, elem := range s.data[1:] {
		if elem < min {
			min = elem
		}
	}
	return min
}

// Max returns the largest (greatest ordered) element in SliceUintptr.
func (s *SliceUintptr) Max() uintptr {
	if s.data == nil || len(s.data) == 0 {
		panic("SliceUintptr does not contain any elements")
	}
	// start with the first value
	max := s.data[0]
	for _, elem := range s.data[1:] {
		if elem > max {
			max = elem
		}
	}
	return max
}

// Clone performs a deep copy of SliceUintptr and returns it
func (s *SliceUintptr) Clone() *SliceUintptr {
	if s == nil {
		return nil
	}
	s2 := new(SliceUintptr)
	s2.data = make([]uintptr, len(s.data))
	copy(s2.data, s.data)
	return s2
}

// Equal returns true if the SliceUintptr is logically equivalent to the specified SliceUintptr.
func (s *SliceUintptr) Equal(s2 *SliceUintptr) bool {
	if s == s2 {
		return true
	}

	if s == nil || s2 == nil {
		return false // has to be false because s == s2 tested earlier
	}

	if len(s.data) != len(s2.data) {
		return false
	}

	for i, elem := range s.data {
		if elem != s2.data[i] {
			return false
		}
	}

	return true
}
